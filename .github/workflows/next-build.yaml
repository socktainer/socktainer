#
# Copyright (C) 2025 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: next build

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

permissions:
  contents: read

jobs:

  tag:
    name: Tagging
    runs-on: ubuntu-24.04
    # disable on forks as secrets are not available
    if: github.event.repository.fork == false
    outputs:
      githubTag: ${{ steps.TAG_UTIL.outputs.githubTag}}
      socktainerVersion: ${{ steps.TAG_UTIL.outputs.socktainerVersion}}
      releaseId: ${{ steps.create_release.outputs.id}}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
         token: ${{ secrets.SOCKTAINER_BOT_TOKEN }}
         fetch-depth: 0
      - name: Generate tag utilities
        id: TAG_UTIL
        run: |
            CURRENT_DAY=$(date +'%Y%m%d')
            SHORT_SHA1=$(git rev-parse --short HEAD)
            # grab the latest tags
            git fetch --tags
            # nearest tag on main
            SOCKTAINER_VERSION=$(git describe --tags --abbrev=0 main)
            STRIPPED_VERSION=${SOCKTAINER_VERSION#v}
            echo "Current version is $STRIPPED_VERSION"
            tmp=${STRIPPED_VERSION%.*}
            minor=${tmp#*.}
            bumpedVersion=${STRIPPED_VERSION%%.*}.$((minor + 1)).0
            TAG_PATTERN=${STRIPPED_VERSION}-next.$(date +'%Y%m%d%H%M')-${SHORT_SHA1}
            echo "githubTag=v$TAG_PATTERN" >> ${GITHUB_OUTPUT}
            echo "socktainerVersion=$TAG_PATTERN" >> ${GITHUB_OUTPUT}
      - name: tag
        run: |
          git config --local user.name ${{ github.actor }}
          git config --local user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          echo "Tagging with ${{ steps.TAG_UTIL.outputs.githubTag }}"
          git tag ${{ steps.TAG_UTIL.outputs.githubTag }}
          # push tag to the prereleases repository
          git remote add prereleases https://github.com/socktainer/prereleases
          git push prereleases ${{ steps.TAG_UTIL.outputs.githubTag }}

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@bcfe5470707e8832e12347755757cec0eb3c22af # v1.18.0
        with:
          tag: ${{ steps.TAG_UTIL.outputs.githubTag }}
          name: ${{ steps.TAG_UTIL.outputs.githubTag }}
          draft: true
          prerelease: true
          owner: socktainer
          repo: prereleases
          token: ${{ secrets.SOCKTAINER_BOT_TOKEN }}

  build:
    name: Build
    needs: tag
    runs-on: macos-26
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: socktainer/prereleases
          ref: ${{ needs.tag.outputs.githubTag}}

      - uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: 26.0.0


      - name: Run Build
        timeout-minutes: 40
        run: make release

      - name: List Build
        run: ls -la ./.build/arm64-apple-macosx/release/


      - name: Decode .p12 certificate
        run: |
          echo "$CERTIFICATE_P12_BASE64" | base64 --decode > signing_cert.p12
        env:
          CERTIFICATE_P12_BASE64: ${{ secrets.CERTIFICATE_P12_BASE64 }}

      - name: Import cert into temporary keychain
        run: |
          KEYCHAIN="$RUNNER_TEMP/build.keychain-db"
          security create-keychain -p "" "$KEYCHAIN"
          security import signing_cert.p12 -k "$KEYCHAIN" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Sign binary
        run: |
          codesign --force \
            --sign "${{ secrets.APPLE_APPLICATION_ID}}" \
            --options runtime \
            --entitlements entitlements.plist \
            ./.build/arm64-apple-macosx/release/socktainer
    
      - name: zip the binary
        run: |
          cd ./.build/arm64-apple-macosx/release/
          zip -r socktainer.zip socktainer

      - name: Submit for notarization
        run: |
          xcrun notarytool submit ./.build/arm64-apple-macosx/release/socktainer.zip \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --wait
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Upload socktainer binary
        run: |
         gh release upload --repo socktainer/prereleases ${{ needs.tag.outputs.githubTag}} ./.build/arm64-apple-macosx/release/socktainer
         gh release upload --repo socktainer/prereleases ${{ needs.tag.outputs.githubTag}} ./.build/arm64-apple-macosx/release/socktainer.zip
        env:
          GITHUB_TOKEN: ${{ secrets.SOCKTAINER_BOT_TOKEN }}

  release:
    needs: [tag, build]
    name: Release
    runs-on: ubuntu-24.04
    steps:
      - name: id
        run: echo the release id is ${{ needs.tag.outputs.releaseId}}

      - name: Publish release
        uses: StuYarrow/publish-release@01f2a1365bacd77bad861873a7fdf274ab49eefd # v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.SOCKTAINER_BOT_TOKEN }}
        with:
          id: ${{ needs.tag.outputs.releaseId}}
          repo: prereleases
          owner: socktainer
